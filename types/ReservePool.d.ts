/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReservePoolInterface extends ethers.utils.Interface {
  functions: {
    "RTD(address)": FunctionFragment;
    "depositFees(address,uint256)": FunctionFragment;
    "depositPayment(address,uint256)": FunctionFragment;
    "depositReserve(address,uint256)": FunctionFragment;
    "getNeededReserves(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "operatorPool(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentReserve(address)": FunctionFragment;
    "reimburseMember(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve(address)": FunctionFragment;
    "reserveOf(address)": FunctionFragment;
    "riskManager()": FunctionFragment;
    "setTargetRTD(address,uint256)": FunctionFragment;
    "targetRTD(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawOperator(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RTD", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPayment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNeededReserves",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "operatorPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reimburseMember",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values: [string]): string;
  encodeFunctionData(functionFragment: "reserveOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "riskManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetRTD",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "targetRTD", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOperator",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "RTD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNeededReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reimburseMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetRTD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetRTD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOperator",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ReservePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReservePoolInterface;

  functions: {
    RTD(network: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFees(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositPayment(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReserve(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNeededReserves(
      network: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorPool(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reimburseMember(
      network: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveOf(network: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    riskManager(overrides?: CallOverrides): Promise<[string]>;

    setTargetRTD(
      network: string,
      _targetRTD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetRTD(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOperator(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RTD(network: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositFees(
    network: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositPayment(
    network: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReserve(
    network: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNeededReserves(
    network: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _riskManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reimburseMember(
    network: string,
    member: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reserveOf(network: string, overrides?: CallOverrides): Promise<BigNumber>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  setTargetRTD(
    network: string,
    _targetRTD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetRTD(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOperator(
    network: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RTD(network: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositFees(
      network: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositPayment(
      network: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReserve(
      network: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNeededReserves(
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_riskManager: string, overrides?: CallOverrides): Promise<void>;

    operatorPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reimburseMember(
      network: string,
      member: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reserveOf(network: string, overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    setTargetRTD(
      network: string,
      _targetRTD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    targetRTD(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOperator(
      network: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    RTD(network: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositFees(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositPayment(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReserve(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNeededReserves(
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reimburseMember(
      network: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reserveOf(network: string, overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    setTargetRTD(
      network: string,
      _targetRTD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetRTD(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOperator(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RTD(
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFees(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositPayment(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReserve(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNeededReserves(
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reimburseMember(
      network: string,
      member: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveOf(
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTargetRTD(
      network: string,
      _targetRTD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetRTD(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOperator(
      network: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
