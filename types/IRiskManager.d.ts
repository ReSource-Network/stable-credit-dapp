/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRiskManagerInterface extends ethers.utils.Interface {
  functions: {
    "reservePool()": FunctionFragment;
    "validateCreditLine(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateCreditLine",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCreditLine",
    data: BytesLike
  ): Result;

  events: {
    "CreditDefault(address,address)": EventFragment;
    "CreditTermsCreated(address,address,uint256,uint256)": EventFragment;
    "PeriodEnded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreditDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditTermsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodEnded"): EventFragment;
}

export type CreditDefaultEvent = TypedEvent<
  [string, string] & { network: string; member: string }
>;

export type CreditTermsCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    network: string;
    member: string;
    pastDueTime: BigNumber;
    defaultTime: BigNumber;
  }
>;

export type PeriodEndedEvent = TypedEvent<
  [string, string] & { network: string; member: string }
>;

export class IRiskManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRiskManagerInterface;

  functions: {
    reservePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateCreditLine(
      network: string,
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  reservePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateCreditLine(
    network: string,
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    reservePool(overrides?: CallOverrides): Promise<string>;

    validateCreditLine(
      network: string,
      member: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreditDefault(address,address)"(
      network?: null,
      member?: null
    ): TypedEventFilter<[string, string], { network: string; member: string }>;

    CreditDefault(
      network?: null,
      member?: null
    ): TypedEventFilter<[string, string], { network: string; member: string }>;

    "CreditTermsCreated(address,address,uint256,uint256)"(
      network?: null,
      member?: null,
      pastDueTime?: null,
      defaultTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        network: string;
        member: string;
        pastDueTime: BigNumber;
        defaultTime: BigNumber;
      }
    >;

    CreditTermsCreated(
      network?: null,
      member?: null,
      pastDueTime?: null,
      defaultTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        network: string;
        member: string;
        pastDueTime: BigNumber;
        defaultTime: BigNumber;
      }
    >;

    "PeriodEnded(address,address)"(
      network?: null,
      member?: null
    ): TypedEventFilter<[string, string], { network: string; member: string }>;

    PeriodEnded(
      network?: null,
      member?: null
    ): TypedEventFilter<[string, string], { network: string; member: string }>;
  };

  estimateGas: {
    reservePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateCreditLine(
      network: string,
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    reservePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateCreditLine(
      network: string,
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
