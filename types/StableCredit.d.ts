/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StableCreditInterface extends ethers.utils.Interface {
  functions: {
    "__MutualCredit_init(string,string)": FunctionFragment;
    "access()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnDemurraged(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "burnNetworkDebt(uint256)": FunctionFragment;
    "conversionRate()": FunctionFragment;
    "convertCreditToFeeToken(uint256)": FunctionFragment;
    "createCreditLine(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "creditBalanceOf(address)": FunctionFragment;
    "creditLimitLeftOf(address)": FunctionFragment;
    "creditLimitOf(address)": FunctionFragment;
    "creditTerms(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "demurrageIndex()": FunctionFragment;
    "demurrageMembers(uint256)": FunctionFragment;
    "demurraged()": FunctionFragment;
    "demurragedBalanceOf(address)": FunctionFragment;
    "extendCreditLine(address,uint256)": FunctionFragment;
    "feeManager()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "inDefault(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,string,string)": FunctionFragment;
    "isPastDue(address)": FunctionFragment;
    "name()": FunctionFragment;
    "networkDebt()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayCreditBalance(uint128)": FunctionFragment;
    "reservePool()": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "setReservePool(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateCreditLine(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__MutualCredit_init",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "access", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnDemurraged",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnNetworkDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertCreditToFeeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCreditLine",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creditBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditLimitLeftOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditLimitOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "creditTerms", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "demurrageIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "demurrageMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "demurraged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "demurragedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLine",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "inDefault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPastDue", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "networkDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCreditLine",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__MutualCredit_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "access", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnDemurraged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnNetworkDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertCreditToFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditLimitLeftOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditLimitOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "demurrageIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "demurrageMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "demurraged", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "demurragedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inDefault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPastDue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCreditLine",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CreditBalanceRepayed(address,uint128)": EventFragment;
    "CreditDefault(address)": EventFragment;
    "CreditLimitExtended(address,uint256)": EventFragment;
    "CreditLimitUpdate(address,uint256)": EventFragment;
    "CreditLineCreated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "MembersDemurraged(uint256)": EventFragment;
    "NetworkDebtBurned(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodEnded(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditBalanceRepayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLimitExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLimitUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembersDemurraged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkDebtBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type CreditBalanceRepayedEvent = TypedEvent<
  [string, BigNumber] & { member: string; amount: BigNumber }
>;

export type CreditDefaultEvent = TypedEvent<[string] & { member: string }>;

export type CreditLimitExtendedEvent = TypedEvent<
  [string, BigNumber] & { member: string; creditLimit: BigNumber }
>;

export type CreditLimitUpdateEvent = TypedEvent<
  [string, BigNumber] & { member: string; limit: BigNumber }
>;

export type CreditLineCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    member: string;
    creditLimit: BigNumber;
    pastDueTime: BigNumber;
    defaultTime: BigNumber;
    feePercent: BigNumber;
    balance: BigNumber;
  }
>;

export type MembersDemurragedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type NetworkDebtBurnedEvent = TypedEvent<
  [string, BigNumber] & { member: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PeriodEndedEvent = TypedEvent<[string] & { member: string }>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class StableCredit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StableCreditInterface;

  functions: {
    __MutualCredit_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    access(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_member: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnDemurraged(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnNetworkDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    conversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    convertCreditToFeeToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { conversion: BigNumber }>;

    createCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      _pastDueTime: BigNumberish,
      _defaultTime: BigNumberish,
      _feePercent: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditLimitLeftOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditLimitOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditTerms(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        issueDate: BigNumber;
        defaultDate: BigNumber;
        pastDueDate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    demurrageIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    demurrageMembers(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    demurraged(overrides?: CallOverrides): Promise<[BigNumber]>;

    demurragedBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extendCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    inDefault(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _feeToken: string,
      _accessManager: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPastDue(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    networkDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayCreditBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservePool(overrides?: CallOverrides): Promise<[string]>;

    setFeeManager(
      _feeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReservePool(
      _reservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateCreditLine(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __MutualCredit_init(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  access(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnDemurraged(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnNetworkDebt(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  convertCreditToFeeToken(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createCreditLine(
    _member: string,
    _creditLimit: BigNumberish,
    _pastDueTime: BigNumberish,
    _defaultTime: BigNumberish,
    _feePercent: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditBalanceOf(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditLimitLeftOf(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditLimitOf(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

  creditTerms(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      issueDate: BigNumber;
      defaultDate: BigNumber;
      pastDueDate: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  demurrageIndex(overrides?: CallOverrides): Promise<BigNumber>;

  demurrageMembers(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  demurraged(overrides?: CallOverrides): Promise<BigNumber>;

  demurragedBalanceOf(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extendCreditLine(
    _member: string,
    _creditLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  inDefault(_member: string, overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _feeToken: string,
    _accessManager: string,
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPastDue(_member: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  networkDebt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayCreditBalance(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservePool(overrides?: CallOverrides): Promise<string>;

  setFeeManager(
    _feeManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReservePool(
    _reservePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateCreditLine(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __MutualCredit_init(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    access(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnDemurraged(_member: string, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnNetworkDebt(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    convertCreditToFeeToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      _pastDueTime: BigNumberish,
      _defaultTime: BigNumberish,
      _feePercent: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditLimitLeftOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditLimitOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditTerms(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        issueDate: BigNumber;
        defaultDate: BigNumber;
        pastDueDate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    demurrageIndex(overrides?: CallOverrides): Promise<BigNumber>;

    demurrageMembers(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    demurraged(overrides?: CallOverrides): Promise<BigNumber>;

    demurragedBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    inDefault(_member: string, overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _feeToken: string,
      _accessManager: string,
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPastDue(_member: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    networkDebt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayCreditBalance(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reservePool(overrides?: CallOverrides): Promise<string>;

    setFeeManager(
      _feeManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePool(
      _reservePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateCreditLine(
      _member: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "CreditBalanceRepayed(address,uint128)"(
      member?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; amount: BigNumber }
    >;

    CreditBalanceRepayed(
      member?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; amount: BigNumber }
    >;

    "CreditDefault(address)"(
      member?: null
    ): TypedEventFilter<[string], { member: string }>;

    CreditDefault(
      member?: null
    ): TypedEventFilter<[string], { member: string }>;

    "CreditLimitExtended(address,uint256)"(
      member?: null,
      creditLimit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; creditLimit: BigNumber }
    >;

    CreditLimitExtended(
      member?: null,
      creditLimit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; creditLimit: BigNumber }
    >;

    "CreditLimitUpdate(address,uint256)"(
      member?: null,
      limit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; limit: BigNumber }
    >;

    CreditLimitUpdate(
      member?: null,
      limit?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; limit: BigNumber }
    >;

    "CreditLineCreated(address,uint256,uint256,uint256,uint256,uint256)"(
      member?: null,
      creditLimit?: null,
      pastDueTime?: null,
      defaultTime?: null,
      feePercent?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        member: string;
        creditLimit: BigNumber;
        pastDueTime: BigNumber;
        defaultTime: BigNumber;
        feePercent: BigNumber;
        balance: BigNumber;
      }
    >;

    CreditLineCreated(
      member?: null,
      creditLimit?: null,
      pastDueTime?: null,
      defaultTime?: null,
      feePercent?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        member: string;
        creditLimit: BigNumber;
        pastDueTime: BigNumber;
        defaultTime: BigNumber;
        feePercent: BigNumber;
        balance: BigNumber;
      }
    >;

    "MembersDemurraged(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    MembersDemurraged(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "NetworkDebtBurned(address,uint256)"(
      member?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; amount: BigNumber }
    >;

    NetworkDebtBurned(
      member?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PeriodEnded(address)"(
      member?: null
    ): TypedEventFilter<[string], { member: string }>;

    PeriodEnded(member?: null): TypedEventFilter<[string], { member: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    __MutualCredit_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    access(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnDemurraged(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnNetworkDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    conversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    convertCreditToFeeToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      _pastDueTime: BigNumberish,
      _defaultTime: BigNumberish,
      _feePercent: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditLimitLeftOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditLimitOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditTerms(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    demurrageIndex(overrides?: CallOverrides): Promise<BigNumber>;

    demurrageMembers(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    demurraged(overrides?: CallOverrides): Promise<BigNumber>;

    demurragedBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    inDefault(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _feeToken: string,
      _accessManager: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPastDue(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    networkDebt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayCreditBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeManager(
      _feeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReservePool(
      _reservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateCreditLine(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __MutualCredit_init(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    access(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnDemurraged(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnNetworkDebt(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    conversionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertCreditToFeeToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      _pastDueTime: BigNumberish,
      _defaultTime: BigNumberish,
      _feePercent: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditLimitLeftOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditLimitOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditTerms(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    demurrageIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demurrageMembers(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    demurraged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demurragedBalanceOf(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendCreditLine(
      _member: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inDefault(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _feeToken: string,
      _accessManager: string,
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPastDue(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayCreditBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReservePool(
      _reservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateCreditLine(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
